<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>学习 on 学而不思则罔</title>
    <link>https://cctrip.github.io/notes/docs/technology/leetcode/learn/</link>
    <description>Recent content in 学习 on 学而不思则罔</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://cctrip.github.io/notes/docs/technology/leetcode/learn/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>数组</title>
      <link>https://cctrip.github.io/notes/docs/technology/leetcode/learn/array/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cctrip.github.io/notes/docs/technology/leetcode/learn/array/</guid>
      <description>数组 #  什么是数组？ #   An Array is a collection of items. The items could be integers, strings, DVDs, games, books—anything really. The items are stored in neighboring (contiguous) memory locations. Because they&amp;rsquo;re stored together, checking through the entire collection of items is straightforward.
  数组的CRUD #  创建和访问数组 #  //数组，长度不可变 //切片，长度可变 func arraySlice() { //创建数组(声明长度) 	var array1 = [5]int{1, 2, 3} //创建数组(不声明长度) 	var array2 = [.</description>
    </item>
    
    <item>
      <title>链表</title>
      <link>https://cctrip.github.io/notes/docs/technology/leetcode/learn/linklist/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cctrip.github.io/notes/docs/technology/leetcode/learn/linklist/</guid>
      <description>链表 #  单向链表 #   Each node in a singly-linked list contains not only the value but also a reference field to link to the next node. By this way, the singly-linked list organizes all the nodes in a sequence.
  CRUD #  创建一个单向链表 #  type List struct { Value {}interface Next *List } import &amp;#34;container/list&amp;#34; func list() { l := list.New() }  添加元素 #  func Append() { }  删除元素 #  func Remove() { } </description>
    </item>
    
    <item>
      <title>二叉树</title>
      <link>https://cctrip.github.io/notes/docs/technology/leetcode/learn/bintree/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cctrip.github.io/notes/docs/technology/leetcode/learn/bintree/</guid>
      <description>二叉树 #   树是模拟分层树结构的常用数据结构。
树的每个节点将具有一个根值和对其他称为子节点的节点的引用列表。从图的角度看，树也可以定义为有向无环图，它具有N个节点和N-1个边。
二叉树是最典型的树结构之一。顾名思义，二叉树是一种树数据结构，其中每个节点最多具有两个子节点，分别称为左子节点和右子节点。
  遍历 #  前序遍历 #  根结点 &amp;mdash;&amp;gt; 左子树 &amp;mdash;&amp;gt; 右子树
中序遍历 #  左子树&amp;mdash;&amp;gt; 根结点 &amp;mdash;&amp;gt; 右子树
后序遍历 #  左子树 &amp;mdash;&amp;gt; 右子树 &amp;mdash;&amp;gt; 根结点
层次遍历 #  广度优先 #  深度优先 #  </description>
    </item>
    
  </channel>
</rss>
